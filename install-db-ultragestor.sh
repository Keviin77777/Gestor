#!/bin/bash

# Script de instala√ß√£o do banco de dados - UltraGestor
# Execute: bash install-db-ultragestor.sh

echo "=========================================="
echo "  Instala√ß√£o do Banco - UltraGestor"
echo "=========================================="
echo ""

# Configura√ß√µes
DB_NAME="ultragestor_db"
DB_USER="ultragestor_db"

# Solicitar senha
read -sp "Digite a senha do banco de dados: " DB_PASS
echo ""
echo ""

# Testar conex√£o
echo "üîç Testando conex√£o com o banco..."
mysql -u "$DB_USER" -p"$DB_PASS" -e "SELECT 1;" 2>/dev/null

if [ $? -ne 0 ]; then
    echo "‚ùå Erro: N√£o foi poss√≠vel conectar ao banco de dados!"
    echo ""
    echo "Verifique:"
    echo "1. A senha est√° correta?"
    echo "2. O usu√°rio '$DB_USER' existe?"
    echo "3. O usu√°rio tem permiss√µes no banco '$DB_NAME'?"
    echo ""
    echo "Para verificar no aaPanel:"
    echo "  aaPanel ‚Üí Database ‚Üí ultragestor_db ‚Üí Ver senha"
    exit 1
fi

echo "‚úÖ Conex√£o OK!"
echo ""

# Criar diret√≥rio tempor√°rio
TMP_DIR="/tmp/ultragestor_install_$$"
mkdir -p "$TMP_DIR"

echo "üì¶ Preparando arquivos SQL..."

# Corrigir o INSTALAR_WORKBENCH.sql
sed "s/USE iptv_manager;/USE $DB_NAME;/g" database/INSTALAR_WORKBENCH.sql > "$TMP_DIR/schema.sql"

echo "üì¶ Importando schema principal..."
mysql -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" < "$TMP_DIR/schema.sql"

if [ $? -eq 0 ]; then
    echo "‚úÖ Schema principal importado!"
else
    echo "‚ùå Erro ao importar schema principal"
    rm -rf "$TMP_DIR"
    exit 1
fi

echo ""
echo "üì¶ Executando migrations..."
echo ""

# Array de migrations em ordem
migrations=(
    "001_create_whatsapp_reminder_tables.sql"
    "002_add_template_scheduling.sql"
    "003_unified_templates_system.sql"
    "004_payment_methods.sql"
    "005_update_whatsapp_templates_payment_link.sql"
    "006_reseller_subscriptions.sql"
    "007_admin_and_reseller_whatsapp.sql"
    "008_default_client_templates.sql"
    "009_admin_payment_methods.sql"
    "010_trial_system.sql"
    "011_add_whatsapp_to_resellers.sql"
    "012_password_reset_tokens.sql"
)

# Executar cada migration
for migration in "${migrations[@]}"; do
    if [ -f "database/migrations/$migration" ]; then
        echo "  ‚Üí $migration"
        mysql -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" < "database/migrations/$migration" 2>&1 | grep -v "Duplicate"
        
        if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "    ‚úÖ OK"
        else
            echo "    ‚ö†Ô∏è  Aviso: Pode j√° estar aplicada"
        fi
    else
        echo "  ‚ö†Ô∏è  Arquivo n√£o encontrado: $migration"
    fi
done

# Limpar arquivos tempor√°rios
rm -rf "$TMP_DIR"

echo ""
echo "=========================================="
echo "  ‚úÖ Instala√ß√£o conclu√≠da!"
echo "=========================================="
echo ""
echo "üìä Verificando instala√ß√£o..."
mysql -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" -e "SHOW TABLES;" | head -20

echo ""
echo "üîê Credenciais padr√£o do sistema:"
echo "   Email: admin@admin.com"
echo "   Senha: admin123"
echo ""
echo "‚ö†Ô∏è  IMPORTANTE: Altere a senha ap√≥s o primeiro login!"
echo ""
echo "üìù Pr√≥ximos passos:"
echo "1. Configure o arquivo .env"
echo "2. Instale depend√™ncias: npm install && composer install"
echo "3. Build do frontend: npm run build"
echo "4. Configure PM2 e Nginx"
echo ""
